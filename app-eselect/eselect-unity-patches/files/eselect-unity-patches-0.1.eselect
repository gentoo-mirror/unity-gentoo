# Copyright 2005-2017 Gentoo Foundation
# Distributed under the terms of the GNU GPL version 2 or later

DESCRIPTION="Manage patches in /etc/portage/unity-patches"
MAINTAINER="c4pp4@seznam.cz"
VERSION="0.1"

get_notes() {
	local param note

	for param in "$@"; do
		if [[ -f ${param}/notes ]]; then
			note=${COLOUR_BOLD}${param#*patches/}${COLOUR_NORMAL}$'\n'"$(<${param}/notes)"

			echo "${note//$'\n'/$'\n'* }"
		fi
	done
}

get_all_packages() {
	local package

	for package in ${EROOT%/}/etc/portage/unity-patches/*/*; do
		[[ -e ${package} ]] && echo "${package}"
	done
}

get_packages() {
	local -a packages=( $(get_all_packages) )
	local param

	for param in "$@"; do
		if is_number ${param}; then
			[[ ${param} -lt 1 || ${param} -gt ${#packages[@]} ]] \
				&& write_error_msg "Invalid number: ${param}" \
				|| echo ${packages[${param}-1]}
		else
			local i

			for (( i = 0; i < ${#packages[@]}; i++ )); do
				if [[ ${packages[i]#*patches/} == ${param} ]]; then
					echo ${packages[i]}
					break
				fi
			done
			[[ ${i} -eq ${#packages[@]} ]] \
				&& write_error_msg "Package not found: ${param}"
		fi
	done
}

### notes action ###

describe_notes() {
	echo "Print all patches notes or for specified PACKAGEs"
}

describe_notes_parameters() {
	echo "[PACKAGE]..."
}

describe_notes_options() {
	echo "PACKAGE : CATEGORY/NAME[VERSION|SLOT] or NUMBER (from 'list' action)"
}

do_notes() {
	[[ -z $1 ]] \
		&& local -a packages=( $(get_all_packages) ) \
		|| local -a packages=( $(get_packages $@) )

	if [[ -n ${packages[@]} ]]; then
		local -a notes=( "$(get_notes ${packages[@]})" )

		write_list_start "Patches notes:"
		if [[ -n ${notes[@]} ]]; then
			local note

			for note in "${notes[@]}"; do
				echo "${note}"
			done
		else
			echo "  ${COLOUR_BOLD}(none found)${COLOUR_NORMAL}"
		fi
	fi
}

### list action ###

describe_list() {
	echo "List available packages"
}

do_list() {
	local -a packages=( $(get_all_packages) )
	local i

	for (( i = 0; i < ${#packages[@]}; i++ )); do
		[[ -f ${packages[i]}/enabled ]] \
			&& packages[i]=$(highlight_marker ${packages[i]#*patches/}) \
			|| packages[i]=${packages[i]#*patches/}
	done
	write_list_start "Available packages:"
	write_numbered_list -m "(none found)" "${packages[@]}"
}

### enable action ###

describe_enable() {
	echo "Enable patches for specified PACKAGEs"
}

describe_enable_parameters() {
	echo "PACKAGE..."
}

describe_enable_options() {
	echo "PACKAGE : CATEGORY/NAME[VERSION|SLOT] or NUMBER (from 'list' action)"
}

do_enable() {
	if [[ -z $1 ]]; then
		write_error_msg "No package(s) specified"
	else
		local -a packages=( $(get_packages $@) )

		if [[ -n ${packages[@]} ]]; then
			local package

			for package in "${packages[@]}"; do
				[[ -f ${package}/enabled ]] \
					&& write_warning_msg "Already enabled: ${package#*patches/}" \
					|| touch "${package}"/enabled
			done
		fi
	fi
}

### disable action ###

describe_disable() {
	echo "Disable patches for specified PACKAGEs"
}

describe_disable_parameters() {
	echo "PACKAGE..."
}

describe_disable_options() {
	echo "PACKAGE : CATEGORY/NAME[VERSION|SLOT] or NUMBER (from 'list' action)"
}

do_disable() {
	if [[ -z $1 ]]; then
		write_error_msg "No package(s) specified"
	else
		local -a packages=( $(get_packages $@) )

		if [[ -n ${packages[@]} ]]; then
			local package

			for package in "${packages[@]}"; do
				[[ -f ${package}/enabled ]] \
					&& rm "${package}"/enabled \
					|| write_warning_msg "Already disabled: ${package#*patches/}"
			done
		fi
	fi
}
