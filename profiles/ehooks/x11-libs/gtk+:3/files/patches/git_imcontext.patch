From 1fd5cd456eadd108062c1e73e8ef96931be2aceb Mon Sep 17 00:00:00 2001
From: Matthias Clasen <mclasen@redhat.com>
Date: Tue, 16 Feb 2021 19:31:17 -0500
Subject: [PATCH] imcontextsimple: Bring back modifier intent
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This was lost by accident in 85d34932f3888caecd4b.

(cherry picked from commit 8780cde9192ef6417a192d51d8a906eed65d054a)

imcontext: Make Compose preedit less intrusive

Tweak the preedit display for Compose sequences to
be not so distracting. We only show the Compose key
when it occurs in the middle of the sequence or is
the only key so far, and use · instead of ⎄ for it.

Also, make sure to display dead keys more adequately.

(cherry picked from commit 523d5121d303fb91e004ea37ce55867008cb2dd7)

imcontext: Fixes to the state machine

It turns out that we we were sometimes emitting
preedit-end multiple times, and sometimes not at
all. Same for preedit-start. To fix this up, introduce
a in_compose_sequence flag, maintain it, and use it
in the right places.

After these changes, both

C-S-u 1 2 3 Enter
Compose a e

generate the right signals:

preedit-start, preedit-changed,..., preedit-end, commit

(cherry picked from commit 7b6f62766695d53d95e1a5677b9e80b4a31f659d)

imcontext: Improve dead key handling

For sequences like `x, where we don't have a compose
sequence, we still want to commit "`x", and not silently
eat the keys.

(cherry picked from commit c26525f87c885929eccf248dd8cae2a2cf28b819)

imcontext: Improve dead key handling more

For sequences like ``, we want to commit the first
deadkey and then continue preedit with the second.

The alternative is to do chained deadkeys, where
entering ~~a yields ̃̀̃̃a. But we don't do that, and
I think that would be more controversial.

(cherry picked from commit a0cdd25bd4274d6ff12162de3d416326ec0429e4)

imcontext: Tweak dead key handling

Reshuffle things to allow for a limited amount of
dead key 'chaining'. We keep up to 2 dead keys in
the preedit, so you can type
<dead_acute> <dead_cedilla> <c>
to produce ḉ, while still getting ```c with
<dead_grave> <dead_grave> <dead_grave> <c>.

(cherry picked from commit 8c7846733aa5e2bac866d8b8ac9eb4d8d1d6f527)

imcontext: Look for Compose file in the right place

The documentation states that GTK will load a Compose
file from ~/.config/gtk-3.0/Compose. Unfortunately,
backports changed this unintentionally to look in
the gtk-4.0 directory. Change it back.

(cherry picked from commit ba8c18019d4258a9fb056ce84d1df8d510a7e444)

imcontext: Eat key events during preedit

Avoid passing through random key press or release
events while we are showing preedit. That prevents
'accidents' like typing Ctrl-. bringing up the
Emoji chooser during preedit, or hitting Ctrl-a
after the Compose key moving the 'dot' around in
vim in terminals.

(cherry picked from commit a926f217d77ac33017e5c6d90dc5beb746449650)

gtkimcontextsimple.c: Declare variables at top-of-block

This way, things will continue to build on older compilers

(cherry picked from commit b69790a7760647efcfbd7a4cd582a3824fa34ae4)

imcontextsimple: Ignore more modifiers in compose

Previously it was impossible to compose characters on higher levels of
some keyboard layouts as pressing the level selection key would just
exit compose mode.

Examples for affected keyboard layouts include the Latvian
apostrophe-variant "lv(apostrophe)" (latched third level), the extended
German keyboard layout "de(e1)" (latched fifth level) as well as the
multilingual Canadian keyboard layout "ca(multix)" and the German
neo-layout "de(neo)" and its descendants (shifted fifth level).

To reproduce, set a compose key and select the Latvian apostrophe layout.
Notice that you now can input [ by pressing first the ' and then the 8-key.
Then pressing <compose>'8'8 should produce ⟦, but prior to this patch it
did not.

(cherry picked from commit d3a564d4f96f806c4a13c2b30c872b8a9606d595)

imcontext: Fix cursor positions

gtk_im_context_get_preedit_string is documented to
return the cursor position as a character offset,
not a byte count. So return that.

Fixed: #3885
(cherry picked from commit d6c45d0e17d1c65972918ba580bfe996e7b9035d)
---
 gtk/gtkimcontextsimple.c | 281 ++++++++++++++++++++++++++++++++++-----
 1 file changed, 250 insertions(+), 31 deletions(-)

diff --git a/gtk/gtkimcontextsimple.c b/gtk/gtkimcontextsimple.c
index e1319a79a8..eb9d7cfbd4 100644
--- a/gtk/gtkimcontextsimple.c
+++ b/gtk/gtkimcontextsimple.c
@@ -65,6 +65,7 @@ struct _GtkIMContextSimplePrivate
   int            tentative_match_len;
 
   guint          in_hex_sequence : 1;
+  guint          in_compose_sequence : 1;
   guint          modifiers_dropped : 1;
 };
 
@@ -99,7 +100,10 @@ static const guint16 gtk_compose_ignore[] = {
   GDK_KEY_Hyper_L,
   GDK_KEY_Hyper_R,
   GDK_KEY_Mode_switch,
-  GDK_KEY_ISO_Level3_Shift
+  GDK_KEY_ISO_Level3_Shift,
+  GDK_KEY_ISO_Level3_Latch,
+  GDK_KEY_ISO_Level5_Shift,
+  GDK_KEY_ISO_Level5_Latch
 };
 
 static void     gtk_im_context_simple_finalize           (GObject                  *obj);
@@ -161,7 +165,7 @@ gtk_im_context_simple_init_compose_table (void)
   const char * const *sys_lang = NULL;
   char *x11_compose_file_dir = get_x11_compose_file_dir ();
 
-  path = g_build_filename (g_get_user_config_dir (), "gtk-4.0", "Compose", NULL);
+  path = g_build_filename (g_get_user_config_dir (), "gtk-3.0", "Compose", NULL);
   if (g_file_test (path, G_FILE_TEST_EXISTS))
     {
       G_LOCK (global_tables);
@@ -302,13 +306,21 @@ gtk_im_context_simple_commit_string (GtkIMContextSimple *context_simple,
                                      const char         *str)
 {
   GtkIMContextSimplePrivate *priv = context_simple->priv;
-  priv->in_hex_sequence = FALSE;
-  g_string_set_size (priv->tentative_match, 0);
-  priv->tentative_match_len = 0;
-  priv->compose_buffer[0] = 0;
 
-  g_signal_emit_by_name (context_simple, "preedit-changed");
-  g_signal_emit_by_name (context_simple, "preedit-end");
+  if (priv->in_hex_sequence ||
+      priv->tentative_match_len > 0 ||
+      priv->compose_buffer[0] != 0)
+    {
+      g_string_set_size (priv->tentative_match, 0);
+      priv->tentative_match_len = 0;
+      priv->in_compose_sequence = FALSE;
+      priv->in_hex_sequence = FALSE;
+      priv->compose_buffer[0] = 0;
+
+      g_signal_emit_by_name (context_simple, "preedit-changed");
+      g_signal_emit_by_name (context_simple, "preedit-end");
+    }
+
   g_signal_emit_by_name (context_simple, "commit", str);
 }
 
@@ -413,6 +425,79 @@ beep_window (GdkWindow *window)
     gdk_window_beep (window);
 }
 
+static inline gboolean
+is_dead_key (guint keysym)
+{
+  return GDK_KEY_dead_grave <= keysym && keysym <= GDK_KEY_dead_greek;
+}
+
+static gunichar
+dead_key_to_unicode (guint     keysym,
+                     gboolean *need_space)
+{
+  /* Sadly, not all the dead keysyms have spacing mark equivalents
+   * in Unicode. For those that don't, we use space + the non-spacing
+   * mark as an approximation
+   */
+  switch (keysym)
+    {
+#define CASE(keysym, unicode, sp) \
+    case GDK_KEY_dead_##keysym: *need_space = sp; return unicode;
+
+    CASE (grave, 0x60, 0);
+    CASE (acute, 0xb4, 0);
+    CASE (circumflex, 0x5e, 0);
+    CASE (tilde, 0x7e, 0);
+    CASE (macron, 0xaf, 0);
+    CASE (breve, 0x2d8, 0);
+    CASE (abovedot, 0x307, 1);
+    CASE (diaeresis, 0xa8, 0);
+    CASE (abovering, 0x2da, 0);
+    CASE (hook, 0x2c0, 0);
+    CASE (doubleacute, 0x2dd, 0);
+    CASE (caron, 0x2c7, 0);
+    CASE (cedilla, 0xb8, 0);
+    CASE (ogonek, 0x2db, 0);
+    CASE (iota, 0x37a, 0);
+    CASE (voiced_sound, 0x3099, 1);
+    CASE (semivoiced_sound, 0x309a, 1);
+    CASE (belowdot, 0x323, 1);
+    CASE (horn, 0x31b, 1);
+    CASE (stroke, 0x335, 1);
+    CASE (abovecomma, 0x2bc, 0);
+    CASE (abovereversedcomma, 0x2bd, 1);
+    CASE (doublegrave, 0x30f, 1);
+    CASE (belowring, 0x2f3, 0);
+    CASE (belowmacron, 0x2cd, 0);
+    CASE (belowcircumflex, 0x32d, 1);
+    CASE (belowtilde, 0x330, 1);
+    CASE (belowbreve, 0x32e, 1);
+    CASE (belowdiaeresis, 0x324, 1);
+    CASE (invertedbreve, 0x32f, 1);
+    CASE (belowcomma, 0x326, 1);
+    CASE (lowline, 0x5f, 0);
+    CASE (aboveverticalline, 0x2c8, 0);
+    CASE (belowverticalline, 0x2cc, 0);
+    CASE (longsolidusoverlay, 0x338, 1);
+    CASE (a, 0x363, 1);
+    CASE (A, 0x363, 1);
+    CASE (e, 0x364, 1);
+    CASE (E, 0x364, 1);
+    CASE (i, 0x365, 1);
+    CASE (I, 0x365, 1);
+    CASE (o, 0x366, 1);
+    CASE (O, 0x366, 1);
+    CASE (u, 0x367, 1);
+    CASE (U, 0x367, 1);
+    CASE (small_schwa, 0x1dea, 1);
+    CASE (capital_schwa, 0x1dea, 1);
+#undef CASE
+    default:
+      *need_space = FALSE;
+      return gdk_keyval_to_unicode (keysym);
+    }
+}
+
 static gboolean
 no_sequence_matches (GtkIMContextSimple *context_simple,
                      int                 n_compose,
@@ -423,7 +508,9 @@ no_sequence_matches (GtkIMContextSimple *context_simple,
   gunichar ch;
 
   context = GTK_IM_CONTEXT (context_simple);
-  
+
+  priv->in_compose_sequence = FALSE;
+
   /* No compose sequences found, check first if we have a partial
    * match pending.
    */
@@ -455,6 +542,67 @@ no_sequence_matches (GtkIMContextSimple *context_simple,
     }
   else
     {
+      int i;
+
+      for (i = 0; i < n_compose && is_dead_key (priv->compose_buffer[i]); i++)
+        ;
+
+      if (n_compose > 1 && i >= n_compose - 1)
+        {
+          gboolean need_space;
+          GString *s;
+
+          s = g_string_new ("");
+
+          if (i == n_compose - 1)
+            {
+              int j;
+
+              /* dead keys are never *really* dead */
+              for (j = 0; j < i; j++)
+                {
+                  ch = dead_key_to_unicode (priv->compose_buffer[j], &need_space);
+                  if (ch)
+                    {
+                      if (need_space)
+                        g_string_append_c (s, ' ');
+                      g_string_append_unichar (s, ch);
+                    }
+                }
+
+              ch = gdk_keyval_to_unicode (priv->compose_buffer[i]);
+              if (ch != 0 && ch != ' ' && !g_unichar_iscntrl (ch))
+                g_string_append_unichar (s, ch);
+
+              gtk_im_context_simple_commit_string (context_simple, s->str);
+            }
+          else
+            {
+              ch = dead_key_to_unicode (priv->compose_buffer[0], &need_space);
+              if (ch)
+                {
+                  if (need_space)
+                    g_string_append_c (s, ' ');
+                  g_string_append_unichar (s, ch);
+                }
+
+              gtk_im_context_simple_commit_string (context_simple, s->str);
+
+              for (i = 1; i < n_compose; i++)
+                priv->compose_buffer[i - 1] = priv->compose_buffer[i];
+              priv->compose_buffer[n_compose - 1] = 0;
+
+              priv->in_compose_sequence = TRUE;
+
+              g_signal_emit_by_name (context, "preedit-start");
+              g_signal_emit_by_name (context, "preedit-changed");
+            }
+
+          g_string_free (s, TRUE);
+
+          return TRUE;
+        }
+
       priv->compose_buffer[0] = 0;
       if (n_compose > 1)		/* Invalid sequence */
 	{
@@ -588,15 +736,25 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
 	    }
 	}
 
+      if (priv->in_hex_sequence || priv->in_compose_sequence)
+        return TRUE; /* Don't leak random key events during preedit */
+
       return FALSE;
     }
 
   /* Ignore modifier key presses */
   for (i = 0; i < G_N_ELEMENTS (gtk_compose_ignore); i++)
     if (event->keyval == gtk_compose_ignore[i])
-      return FALSE;
+      {
+        if (priv->in_hex_sequence || priv->in_compose_sequence)
+          return TRUE; /* Don't leak random key events during preedit */
 
-  hex_mod_mask = GDK_CONTROL_MASK|GDK_SHIFT_MASK;
+        return FALSE;
+      }
+
+  hex_mod_mask = gdk_keymap_get_modifier_mask (gdk_keymap_get_for_display (display),
+                                               GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR);
+  hex_mod_mask |= GDK_SHIFT_MASK;
 
   if (priv->in_hex_sequence && priv->modifiers_dropped)
     have_hex_mods = TRUE;
@@ -631,16 +789,23 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
         gdk_keymap_get_modifier_mask (gdk_keymap_get_for_display (display),
                                       GDK_MODIFIER_INTENT_NO_TEXT_INPUT);
 
-      if (event->state & no_text_input_mask ||
-	  (priv->in_hex_sequence && priv->modifiers_dropped &&
-	   (event->keyval == GDK_KEY_Return ||
-	    event->keyval == GDK_KEY_ISO_Enter ||
-	    event->keyval == GDK_KEY_KP_Enter)))
+      if (priv->in_hex_sequence && priv->modifiers_dropped &&
+	  (event->keyval == GDK_KEY_Return ||
+	   event->keyval == GDK_KEY_ISO_Enter ||
+	   event->keyval == GDK_KEY_KP_Enter))
 	{
 	  return FALSE;
 	}
+
+      if (event->state & no_text_input_mask)
+        {
+          if (priv->in_hex_sequence || priv->in_compose_sequence)
+            return TRUE; /* Don't leak random key events during preedit */
+
+          return FALSE;
+        }
     }
-  
+
   /* Handle backspace */
   if (priv->in_hex_sequence && have_hex_mods && is_backspace)
     {
@@ -659,7 +824,7 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
 
       if (!priv->in_hex_sequence)
         g_signal_emit_by_name (context_simple, "preedit-end");
-      
+
       return TRUE;
     }
 
@@ -711,7 +876,6 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
       return TRUE;
     }
   
-  /* Then, check for compose sequences */
   if (priv->in_hex_sequence)
     {
       if (hex_keyval && n_compose < 6)
@@ -754,6 +918,8 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
                   char *str = g_strdup (priv->tentative_match->str);
 		  gtk_im_context_simple_commit_string (context_simple, str);
                   g_free (str);
+
+                  return TRUE;
 		}
 	      else
 		{
@@ -776,7 +942,7 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
 	  return TRUE;
         }
     }
-  else
+  else /* Then, check for compose sequences */
     {
       gboolean success = FALSE;
       GString *output;
@@ -793,6 +959,12 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
                                        &compose_finish, &compose_match,
                                        output))
             {
+              if (!priv->in_compose_sequence)
+                {
+                  priv->in_compose_sequence = TRUE;
+                  g_signal_emit_by_name (context_simple, "preedit-start");
+                }
+
               if (compose_finish)
                 {
                   if (compose_match)
@@ -827,6 +999,12 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
                                            &compose_finish, &compose_match,
                                            &output_char))
         {
+          if (!priv->in_compose_sequence)
+            {
+              priv->in_compose_sequence = TRUE;
+              g_signal_emit_by_name (context_simple, "preedit-start");
+            }
+
           if (compose_finish)
             {
               if (compose_match)
@@ -848,8 +1026,17 @@ gtk_im_context_simple_filter_keypress (GtkIMContext *context,
 
       if (gtk_check_algorithmically (priv->compose_buffer, n_compose, &output_char))
         {
+          if (!priv->in_compose_sequence)
+            {
+              priv->in_compose_sequence = TRUE;
+              g_signal_emit_by_name (context_simple, "preedit-start");
+            }
+
           if (output_char)
             gtk_im_context_simple_commit_char (context_simple, output_char);
+          else
+            g_signal_emit_by_name (context_simple, "preedit-changed");
+
           return TRUE;
         }
     }
@@ -896,23 +1083,55 @@ gtk_im_context_simple_get_preedit_string (GtkIMContext   *context,
       for (i = 0; priv->compose_buffer[i]; i++)
         g_string_append_unichar (s, gdk_keyval_to_unicode (priv->compose_buffer[i]));
     }
-  else if (priv->tentative_match->len > 0 && priv->compose_buffer[0] != 0)
-    {
-       g_string_append (s, priv->tentative_match->str);
-    }
-  else
+  else if (priv->in_compose_sequence)
     {
-      for (i = 0; priv->compose_buffer[i]; i++)
+      if (priv->tentative_match_len > 0 && priv->compose_buffer[0] != 0)
         {
-          if (priv->compose_buffer[i] == GDK_KEY_Multi_key)
-            g_string_append_unichar (s, 0x2384); /* U+2384 COMPOSITION SYMBOL */
-          else
-            g_string_append_unichar (s, gdk_keyval_to_unicode (priv->compose_buffer[i]));
+           g_string_append (s, priv->tentative_match->str);
+        }
+      else
+        {
+          for (i = 0; priv->compose_buffer[i]; i++)
+            {
+              if (priv->compose_buffer[i] == GDK_KEY_Multi_key)
+                {
+                  /* We only show the Compose key visibly when it is the
+                   * only glyph in the preedit, or when it occurs in the
+                   * middle of the sequence. Sadly, the official character,
+                   * U+2384, COMPOSITION SYMBOL, is bit too distracting, so
+                   * we use U+00B7, MIDDLE DOT.
+                   */
+                  if (priv->compose_buffer[1] == 0 || i > 0)
+                    g_string_append (s, "·");
+                }
+              else
+                {
+                  gunichar ch;
+                  gboolean need_space;
+
+                  if (is_dead_key (priv->compose_buffer[i]))
+                    {
+                      ch = dead_key_to_unicode (priv->compose_buffer[i], &need_space);
+                      if (ch)
+                        {
+                          if (need_space)
+                            g_string_append_c (s, ' ');
+                          g_string_append_unichar (s, ch);
+                        }
+                    }
+                  else
+                    {
+                      ch = gdk_keyval_to_unicode (priv->compose_buffer[i]);
+                      if (ch)
+                        g_string_append_unichar (s, ch);
+                    }
+                }
+            }
         }
     }
 
   if (cursor_pos)
-    *cursor_pos = s->len;
+    *cursor_pos = g_utf8_strlen (s->str, s->len);
 
   if (attrs)
     {
-- 
2.30.2

