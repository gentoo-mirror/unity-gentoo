From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Sat, 14 Nov 2020 02:03:26 +0100
Subject: smartcard: Use autopointers

Avoid manage memory manually when we can get it for free, fixing also
a leak in case we cancel the wait-for-smartcard thread.

Origin: https://gitlab.gnome.org/GNOME/gnome-settings-daemon/-/merge_requests/208
---
 plugins/smartcard/gsd-smartcard-manager.c | 16 ++----
 plugins/smartcard/gsd-smartcard-service.c | 92 +++++++++++--------------------
 plugins/smartcard/gsd-smartcard-utils.c   | 10 +---
 3 files changed, 41 insertions(+), 77 deletions(-)

diff --git a/plugins/smartcard/gsd-smartcard-manager.c b/plugins/smartcard/gsd-smartcard-manager.c
index 1475112..74c8b7b 100644
--- a/plugins/smartcard/gsd-smartcard-manager.c
+++ b/plugins/smartcard/gsd-smartcard-manager.c
@@ -384,7 +384,7 @@ watch_smartcards_from_module (GTask                    *task,
         g_debug ("watching for smartcard events");
         while (!g_cancellable_is_cancelled (cancellable)) {
                 gboolean watch_succeeded;
-                GError *error = NULL;
+                g_autoptr(GError) error = NULL;
 
                 watch_succeeded = watch_one_event_from_module (self, operation, cancellable, &error);
 
@@ -393,7 +393,7 @@ watch_smartcards_from_module (GTask                    *task,
                 }
 
                 if (!watch_succeeded) {
-                        g_task_return_error (task, error);
+                        g_task_return_error (task, g_steal_pointer (&error));
                         break;
                 }
         }
@@ -599,11 +599,10 @@ static void
 on_smartcards_watched (GsdSmartcardManager *self,
                        GAsyncResult        *result)
 {
-        GError *error = NULL;
+        g_autoptr(GError) error = NULL;
 
         if (!watch_smartcards_async_finish (self, result, &error)) {
                 g_debug ("Error watching smartcards: %s", error->message);
-                g_error_free (error);
         }
 }
 
@@ -613,13 +612,12 @@ on_service_created (GObject             *source_object,
                     GsdSmartcardManager *self)
 {
         GsdSmartcardService *service;
-        GError *error = NULL;
+        g_autoptr(GError) error = NULL;
 
         service = gsd_smartcard_service_new_finish (result, &error);
 
         if (service == NULL) {
                 g_warning("Couldn't create session bus service: %s", error->message);
-                g_error_free (error);
                 return;
         }
 
@@ -685,14 +683,13 @@ on_screen_locked (GsdScreenSaver      *screen_saver,
                   GAsyncResult        *result,
                   GsdSmartcardManager *self)
 {
+        g_autoptr(GError) error = NULL;
         gboolean is_locked;
-        GError *error = NULL;
 
         is_locked = gsd_screen_saver_call_lock_finish (screen_saver, result, &error);
 
         if (!is_locked) {
                 g_warning ("Couldn't lock screen: %s", error->message);
-                g_error_free (error);
                 return;
         }
 }
@@ -714,14 +711,13 @@ on_logged_out (GsdSessionManager   *session_manager,
                GAsyncResult        *result,
                GsdSmartcardManager *self)
 {
+        g_autoptr(GError) error = NULL;
         gboolean is_logged_out;
-        GError *error = NULL;
 
         is_logged_out = gsd_session_manager_call_logout_finish (session_manager, result, &error);
 
         if (!is_logged_out) {
                 g_warning ("Couldn't log out: %s", error->message);
-                g_error_free (error);
                 return;
         }
 }
diff --git a/plugins/smartcard/gsd-smartcard-service.c b/plugins/smartcard/gsd-smartcard-service.c
index 4e10dc3..8fffbaa 100644
--- a/plugins/smartcard/gsd-smartcard-service.c
+++ b/plugins/smartcard/gsd-smartcard-service.c
@@ -97,7 +97,7 @@ set_bus_connection (GsdSmartcardService  *self,
 static void
 register_object_manager (GsdSmartcardService *self)
 {
-        GsdSmartcardServiceObjectSkeleton *object;
+        g_autoptr(GsdSmartcardServiceObjectSkeleton) object = NULL;
 
         self->object_manager_server = g_dbus_object_manager_server_new (GSD_SMARTCARD_DBUS_PATH);
 
@@ -107,8 +107,6 @@ register_object_manager (GsdSmartcardService *self)
 
         g_dbus_object_manager_server_export (self->object_manager_server,
                                              G_DBUS_OBJECT_SKELETON (object));
-        g_object_unref (object);
-
         g_dbus_object_manager_server_set_connection (self->object_manager_server,
                                                      self->bus_connection);
 }
@@ -122,8 +120,8 @@ get_login_token_object_path (GsdSmartcardService *self)
 static void
 register_login_token_alias (GsdSmartcardService *self)
 {
-        GDBusObjectSkeleton *object;
-        GDBusInterfaceSkeleton *interface;
+        g_autoptr(GDBusObjectSkeleton) object = NULL;
+        g_autoptr(GDBusInterfaceSkeleton) interface = NULL;
         const char *object_path;
         const char *token_name;
 
@@ -137,7 +135,6 @@ register_login_token_alias (GsdSmartcardService *self)
         interface = G_DBUS_INTERFACE_SKELETON (gsd_smartcard_service_token_skeleton_new ());
 
         g_dbus_object_skeleton_add_interface (object, interface);
-        g_object_unref (interface);
 
         g_object_set (G_OBJECT (interface),
                       "name", token_name,
@@ -156,8 +153,9 @@ register_login_token_alias (GsdSmartcardService *self)
 static void
 on_bus_gotten (GObject      *source_object,
                GAsyncResult *result,
-               GTask        *task)
+               gpointer      user_data)
 {
+        g_autoptr(GTask) task = g_steal_pointer (&user_data);
         GsdSmartcardService *self;
         GDBusConnection *connection;
         GError *error = NULL;
@@ -165,7 +163,7 @@ on_bus_gotten (GObject      *source_object,
         connection = g_bus_get_finish (result, &error);
         if (connection == NULL) {
                 g_task_return_error (task, error);
-                goto out;
+                return;
         }
 
         g_debug ("taking name %s on session bus", GSD_SMARTCARD_DBUS_NAME);
@@ -188,10 +186,6 @@ on_bus_gotten (GObject      *source_object,
          */
         register_login_token_alias (self);
         g_task_return_boolean (task, TRUE);
-
-out:
-        g_object_unref (task);
-        return;
 }
 
 static gboolean
@@ -239,22 +233,18 @@ static char *
 get_object_path_for_token (GsdSmartcardService *self,
                            GckSlot             *slot)
 {
-        char *object_path;
-        char *escaped_library_path;
         g_autofree char *module_path = NULL;
+        g_autofree char *escaped_library_path = NULL;
         g_autoptr(GckModule) module = NULL;
 
         module = gck_slot_get_module (slot);
         module_path = module_get_path (module);
         escaped_library_path = gsd_smartcard_utils_escape_object_path (module_path);
 
-        object_path = g_strdup_printf ("%s/token_from_%s_slot_%lu",
-                                       GSD_SMARTCARD_MANAGER_TOKENS_DBUS_PATH,
-                                       escaped_library_path,
-                                       gck_slot_get_handle (slot));
-        g_free (escaped_library_path);
-
-        return object_path;
+        return g_strdup_printf ("%s/token_from_%s_slot_%lu",
+                                GSD_SMARTCARD_MANAGER_TOKENS_DBUS_PATH,
+                                escaped_library_path,
+                                gck_slot_get_handle (slot));
 }
 
 static gboolean
@@ -263,7 +253,7 @@ gsd_smartcard_service_handle_get_login_token (GsdSmartcardServiceManager *manage
 {
         GsdSmartcardService *self = GSD_SMARTCARD_SERVICE (manager);
         g_autoptr(GckSlot) card_slot = NULL;
-        char *object_path;
+        g_autofree char *object_path = NULL;
 
         card_slot = gsd_smartcard_manager_get_login_token (self->smartcard_manager);
 
@@ -295,8 +285,6 @@ gsd_smartcard_service_handle_get_login_token (GsdSmartcardServiceManager *manage
         gsd_smartcard_service_manager_complete_get_login_token (manager,
                                                                 invocation,
                                                                 object_path);
-        g_free (object_path);
-
         return TRUE;
 }
 
@@ -305,13 +293,14 @@ gsd_smartcard_service_handle_get_inserted_tokens (GsdSmartcardServiceManager *ma
                                                   GDBusMethodInvocation      *invocation)
 {
         GsdSmartcardService *self = GSD_SMARTCARD_SERVICE (manager);
-        GList *inserted_tokens, *node;
-        GPtrArray *object_paths;
+        g_autolist(GckSlot) inserted_tokens = NULL;
+        g_autoptr(GPtrArray) object_paths = NULL;
+        GList *node;
 
         inserted_tokens = gsd_smartcard_manager_get_inserted_tokens (self->smartcard_manager,
                                                                      NULL);
 
-        object_paths = g_ptr_array_new ();
+        object_paths = g_ptr_array_new_with_free_func (g_free);
         for (node = inserted_tokens; node != NULL; node = node->next) {
                 GckSlot *card_slot = node->data;
                 char *object_path;
@@ -320,14 +309,11 @@ gsd_smartcard_service_handle_get_inserted_tokens (GsdSmartcardServiceManager *ma
                 g_ptr_array_add (object_paths, object_path);
         }
         g_ptr_array_add (object_paths, NULL);
-        g_list_free_full (inserted_tokens, g_object_unref);
 
         gsd_smartcard_service_manager_complete_get_inserted_tokens (manager,
                                                                     invocation,
                                                                     (const char * const *) object_paths->pdata);
 
-        g_ptr_array_free (object_paths, TRUE);
-
         return TRUE;
 }
 
@@ -431,8 +417,9 @@ gsd_smartcard_service_class_init (GsdSmartcardServiceClass *service_class)
 static void
 on_new_async_finished (GObject      *source_object,
                        GAsyncResult *result,
-                       GTask        *task)
+                       gpointer      user_data)
 {
+        g_autoptr(GTask) task = g_steal_pointer (&user_data);
         GError *error = NULL;
         GObject *object;
 
@@ -442,15 +429,12 @@ on_new_async_finished (GObject      *source_object,
 
         if (object == NULL) {
                 g_task_return_error (task, error);
-                goto out;
+                return;
         }
 
         g_assert (GSD_IS_SMARTCARD_SERVICE (object));
 
         g_task_return_pointer (task, object, g_object_unref);
-out:
-        g_object_unref (task);
-        return;
 }
 
 void
@@ -494,14 +478,13 @@ get_object_path_for_module_path (GsdSmartcardService *self,
                                  const char          *module_path)
 {
         char *object_path;
-        char *escaped_library_path;
+        g_autofree char *escaped_library_path = NULL;
 
         escaped_library_path = gsd_smartcard_utils_escape_object_path (module_path);
 
         object_path = g_build_path ("/",
                                     GSD_SMARTCARD_MANAGER_DRIVERS_DBUS_PATH,
                                     escaped_library_path, NULL);
-        g_free (escaped_library_path);
 
         return object_path;
 }
@@ -521,21 +504,19 @@ void
 gsd_smartcard_service_register_driver (GsdSmartcardService *self,
                                        GckModule           *module)
 {
-        char *object_path;
-        GDBusObjectSkeleton *object;
-        GDBusInterfaceSkeleton *interface;
+        g_autoptr(GDBusObjectSkeleton) object = NULL;
+        g_autoptr(GDBusInterfaceSkeleton) interface = NULL;
         g_autoptr(GckModuleInfo) module_info = NULL;
+        g_autofree char *object_path = NULL;
         g_autofree char *module_path = NULL;
         const char *module_description;
 
         module_path = module_get_path (module);
         object_path = get_object_path_for_module_path (self, module_path);
         object = G_DBUS_OBJECT_SKELETON (gsd_smartcard_service_object_skeleton_new (object_path));
-        g_free (object_path);
 
         interface = G_DBUS_INTERFACE_SKELETON (gsd_smartcard_service_driver_skeleton_new ());
         g_dbus_object_skeleton_add_interface (object, interface);
-        g_object_unref (interface);
 
         module_info = gck_module_get_info (module);
         module_description = module_info ? module_info->library_description : NULL;
@@ -548,7 +529,6 @@ gsd_smartcard_service_register_driver (GsdSmartcardService *self,
                       NULL);
         g_dbus_object_manager_server_export (self->object_manager_server,
                                              object);
-        g_object_unref (object);
 }
 
 static void
@@ -557,18 +537,18 @@ synchronize_token_now (GsdSmartcardService *self,
 {
         GDBusInterfaceSkeleton *interface;
         g_autoptr(GckTokenInfo) token_info = NULL;
-        char *object_path;
+        g_autoptr(GMutexLocker) locked = NULL;
+        g_autofree char *object_path = NULL;
         const char *token_name = NULL;
         gboolean is_present, is_login_card;
 
         object_path = get_object_path_for_token (self, card_slot);
 
-        G_LOCK (gsd_smartcard_tokens);
+        locked = g_mutex_locker_new (&G_LOCK_NAME (gsd_smartcard_tokens));
         interface = g_hash_table_lookup (self->tokens, object_path);
-        g_free (object_path);
 
         if (interface == NULL)
-                goto out;
+                return;
 
         is_present = gsd_smartcard_utils_slot_has_flags (card_slot, CKF_TOKEN_PRESENT);
 
@@ -627,9 +607,6 @@ synchronize_token_now (GsdSmartcardService *self,
                         self->login_token_bound = TRUE;
                 }
         }
-
-out:
-        G_UNLOCK (gsd_smartcard_tokens);
 }
 
 typedef struct
@@ -655,11 +632,11 @@ static gboolean
 on_main_thread_to_register_new_token (GTask *task)
 {
         GsdSmartcardService *self;
-        GDBusObjectSkeleton *object;
-        GDBusInterfaceSkeleton *interface;
         RegisterNewTokenOperation *operation;
+        g_autoptr(GDBusObjectSkeleton) object = NULL;
+        g_autoptr(GDBusInterfaceSkeleton) interface = NULL;
         g_autoptr(GckModule) module = NULL;
-        char *driver_object_path;
+        g_autofree char *driver_object_path = NULL;
         const char *token_name;
 
         self = g_task_get_source_object (task);
@@ -671,7 +648,6 @@ on_main_thread_to_register_new_token (GTask *task)
         interface = G_DBUS_INTERFACE_SKELETON (gsd_smartcard_service_token_skeleton_new ());
 
         g_dbus_object_skeleton_add_interface (object, interface);
-        g_object_unref (interface);
 
         module = gck_slot_get_module (operation->card_slot);
         driver_object_path = get_object_path_for_module (self, module);
@@ -681,7 +657,6 @@ on_main_thread_to_register_new_token (GTask *task)
                       "driver", driver_object_path,
                       "name", token_name,
                       NULL);
-        g_free (driver_object_path);
 
         g_dbus_object_manager_server_export (self->object_manager_server,
                                              object);
@@ -701,14 +676,13 @@ create_main_thread_source (GSourceFunc   callback,
                            gpointer      user_data,
                            GSource     **source_out)
 {
-        GSource *source;
+        g_autoptr(GSource) source = NULL;
 
         source = g_idle_source_new ();
         g_source_set_callback (source, callback, user_data, NULL);
 
         *source_out = source;
         g_source_attach (source, NULL);
-        g_source_unref (source);
 }
 
 static void
@@ -853,7 +827,7 @@ gsd_smartcard_service_sync_token (GsdSmartcardService *self,
                                   GckSlot             *card_slot,
                                   GCancellable        *cancellable)
 {
-        char *object_path;
+        g_autofree char *object_path = NULL;
         GDBusInterfaceSkeleton *interface;
 
         object_path = get_object_path_for_token (self, card_slot);
@@ -878,6 +852,4 @@ gsd_smartcard_service_sync_token (GsdSmartcardService *self,
                                                   (GAsyncReadyCallback)
                                                   on_token_synchronized,
                                                   NULL);
-
-        g_free (object_path);
 }
diff --git a/plugins/smartcard/gsd-smartcard-utils.c b/plugins/smartcard/gsd-smartcard-utils.c
index f670b27..1f06e56 100644
--- a/plugins/smartcard/gsd-smartcard-utils.c
+++ b/plugins/smartcard/gsd-smartcard-utils.c
@@ -63,7 +63,7 @@ dashed_string_to_dbus_error_string (const char *dashed_string,
                                     const char *new_prefix,
                                     const char *suffix)
 {
-        char *studly_suffix;
+        g_autofree char *studly_suffix = NULL;
         char *dbus_error_string;
         size_t dbus_error_string_length;
         size_t i;
@@ -78,7 +78,6 @@ dashed_string_to_dbus_error_string (const char *dashed_string,
 
         studly_suffix = dashed_string_to_studly_caps (suffix);
         dbus_error_string = g_strdup_printf ("%s.%s.%s", new_prefix, dashed_string, studly_suffix);
-        g_free (studly_suffix);
         i += strlen (new_prefix) + 1;
 
         dbus_error_string_length = strlen (dbus_error_string);
@@ -105,10 +104,10 @@ void
 gsd_smartcard_utils_register_error_domain (GQuark error_domain,
                                            GType  error_enum)
 {
+        g_autoptr(GTypeClass) type_class = NULL;
         g_autofree char *type_name = NULL;
         const char *error_domain_string;
         GType type;
-        GTypeClass *type_class;
         GEnumClass *enum_class;
         guint i;
 
@@ -119,7 +118,7 @@ gsd_smartcard_utils_register_error_domain (GQuark error_domain,
         enum_class = G_ENUM_CLASS (type_class);
 
         for (i = 0; i < enum_class->n_values; i++) {
-                char *dbus_error_string;
+                g_autofree char *dbus_error_string = NULL;
 
                 dbus_error_string = dashed_string_to_dbus_error_string (error_domain_string,
                                                                         "gsd",
@@ -130,10 +129,7 @@ gsd_smartcard_utils_register_error_domain (GQuark error_domain,
                 g_dbus_error_register_error (error_domain,
                                              enum_class->values[i].value,
                                              dbus_error_string);
-                g_free (dbus_error_string);
         }
-
-        g_type_class_unref (type_class);
 }
 
 char *
