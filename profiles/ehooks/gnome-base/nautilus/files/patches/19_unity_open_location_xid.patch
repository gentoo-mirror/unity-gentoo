From: Marco Trevisan <marco@ubuntu.com>
Date: Fri, 20 Jul 2018 03:25:37 +0200
Subject: Add a new dbus property to the nautilus'

"org.freedesktop.FileManager1" dbus interface where it stores the lists of
opened locations referenced by their parent nautilus window XID.
Bug-Ubuntu: https://bugs.launchpad.net/unity/+bug/887449
Forwarded: no
Author: Marco Trevisan <marco@ubuntu.com>
---
 data/freedesktop-dbus-interfaces.xml |  1 +
 src/nautilus-application.c           | 71 +++++++++++++++++++++++++++++++++++-
 src/nautilus-freedesktop-dbus.c      | 21 +++++++++++
 src/nautilus-freedesktop-dbus.h      |  2 +
 4 files changed, 93 insertions(+), 2 deletions(-)

diff --git a/data/freedesktop-dbus-interfaces.xml b/data/freedesktop-dbus-interfaces.xml
index d648205..e8e657f 100644
--- a/data/freedesktop-dbus-interfaces.xml
+++ b/data/freedesktop-dbus-interfaces.xml
@@ -31,6 +31,7 @@
       <arg type='s' name='StartupId' direction='in'/>
     </method>
     <property name="OpenLocations" type="as" access="read"/>
+    <property name="XUbuntuOpenLocationsXids" type="a{uas}" access="read"/>
     <!--
       An extension to the official FileManager1 interface that allows Nautilus
       to publish a mapping of windows to the locations in each window.
diff --git a/src/nautilus-application.c b/src/nautilus-application.c
index 5a72ce7..4bb322f 100644
--- a/src/nautilus-application.c
+++ b/src/nautilus-application.c
@@ -31,6 +31,9 @@
 #include <eel/eel-stock-dialogs.h>
 #include <fcntl.h>
 #include <gdk/gdk.h>
+#ifdef GDK_WINDOWING_X11
+#include <gdk/gdkx.h>
+#endif
 #include <gio/gio.h>
 #include <glib/gi18n.h>
 #include <glib/gstdio.h>
@@ -1459,10 +1462,14 @@ update_dbus_opened_locations (NautilusApplication *self)
     const gchar *dbus_object_path = NULL;
 
     g_autoptr (GVariant) windows_to_locations = NULL;
+    GVariantBuilder b;
+    GVariantBuilder wb;
     GVariantBuilder windows_to_locations_builder;
 
     g_return_if_fail (NAUTILUS_IS_APPLICATION (self));
 
+    g_variant_builder_init (&b, G_VARIANT_TYPE ("a{uas}"));
+
     priv = nautilus_application_get_instance_private (self);
 
     /* Children of nautilus application could not handle the dbus, so don't
@@ -1482,10 +1489,27 @@ update_dbus_opened_locations (NautilusApplication *self)
     {
         guint32 id;
         g_autofree gchar *path = NULL;
+        NautilusWindowSlot *active_slot;
         GVariantBuilder locations_in_window_builder;
 
         window = l->data;
 
+        g_variant_builder_init (&wb, G_VARIANT_TYPE ("as"));
+
+        active_slot = nautilus_window_get_active_slot (window);
+
+        if (active_slot != NULL)
+        {
+            location = nautilus_window_slot_get_location (active_slot);
+
+                if (location != NULL)
+                {
+                    gchar *active_uri = g_file_get_uri (location);
+                    g_variant_builder_add (&wb, "s", active_uri);
+                    g_free (active_uri);
+                }
+        }
+
         g_variant_builder_init (&locations_in_window_builder, G_VARIANT_TYPE ("as"));
 
         for (sl = nautilus_window_get_slots (window); sl; sl = sl->next)
@@ -1495,8 +1519,17 @@ update_dbus_opened_locations (NautilusApplication *self)
 
             if (location != NULL)
             {
-                gchar *uri = g_file_get_uri (location);
-                GList *found = g_list_find_custom (locations, uri, (GCompareFunc) g_strcmp0);
+                gchar *uri;
+                GList *found;
+
+                uri = g_file_get_uri (location);
+
+                if (slot != active_slot)
+                {
+                    g_variant_builder_add (&wb, "s", uri);
+                }
+
+                found = g_list_find_custom (locations, uri, (GCompareFunc) g_strcmp0);
 
                 g_variant_builder_add (&locations_in_window_builder, "s", uri);
 
@@ -1512,6 +1545,28 @@ update_dbus_opened_locations (NautilusApplication *self)
             }
         }
 
+        if (gtk_widget_get_realized (GTK_WIDGET (l->data)))
+        {
+           guint32 window_id;
+           GdkWindow *gdk_win;
+
+           window_id = 0;
+           gdk_win = gtk_widget_get_window (GTK_WIDGET (l->data));
+#ifdef GDK_WINDOWING_X11
+           if (GDK_IS_X11_WINDOW (gdk_win))
+           {
+               window_id = gdk_x11_window_get_xid (gdk_win);
+           }
+           else
+           {
+               window_id = GPOINTER_TO_UINT(gdk_win);
+           }
+#endif
+           g_variant_builder_add (&b, "{uas}", window_id, &wb);
+        }
+
+        g_variant_builder_clear (&wb);
+
         id = gtk_application_window_get_id (GTK_APPLICATION_WINDOW (window));
         path = g_strdup_printf ("%s/window/%u", dbus_object_path, id);
         g_variant_builder_add (&windows_to_locations_builder, "{sas}", path, &locations_in_window_builder);
@@ -1531,6 +1586,9 @@ update_dbus_opened_locations (NautilusApplication *self)
     nautilus_freedesktop_dbus_set_open_locations (priv->fdb_manager,
                                                   (const gchar **) locations_array);
 
+    nautilus_freedesktop_dbus_set_open_locations_xids (priv->fdb_manager,
+                                                       g_variant_builder_end (&b));
+
     windows_to_locations = g_variant_ref_sink (g_variant_builder_end (&windows_to_locations_builder));
     nautilus_freedesktop_dbus_set_open_windows_with_locations (priv->fdb_manager,
                                                                windows_to_locations);
@@ -1577,6 +1635,13 @@ on_active_selection_changed (NautilusWindow      *window,
     update_previewer_selection (self, window);
 }
 
+static void
+on_realize (GtkWidget           *widget,
+            NautilusApplication *self)
+{
+    update_dbus_opened_locations (self);
+}
+
 static void
 nautilus_application_window_added (GtkApplication *app,
                                    GtkWindow      *window)
@@ -1590,6 +1655,7 @@ nautilus_application_window_added (GtkApplication *app,
     if (NAUTILUS_IS_WINDOW (window))
     {
         priv->windows = g_list_prepend (priv->windows, window);
+        g_signal_connect (window, "realize", G_CALLBACK (on_realize), app);
         g_signal_connect (window, "slot-added", G_CALLBACK (on_slot_added), app);
         g_signal_connect (window, "slot-removed", G_CALLBACK (on_slot_removed), app);
         g_signal_connect (window, "active-selection-changed", G_CALLBACK (on_active_selection_changed), app);
@@ -1610,6 +1676,7 @@ nautilus_application_window_removed (GtkApplication *app,
     if (NAUTILUS_IS_WINDOW (window))
     {
         priv->windows = g_list_remove_all (priv->windows, window);
+        g_signal_handlers_disconnect_by_func (window, on_realize, app);
         g_signal_handlers_disconnect_by_func (window, on_slot_added, app);
         g_signal_handlers_disconnect_by_func (window, on_slot_removed, app);
         g_signal_handlers_disconnect_by_func (window, on_active_selection_changed, app);
diff --git a/src/nautilus-freedesktop-dbus.c b/src/nautilus-freedesktop-dbus.c
index 5cbbbad..81c6196 100644
--- a/src/nautilus-freedesktop-dbus.c
+++ b/src/nautilus-freedesktop-dbus.c
@@ -285,6 +285,27 @@ nautilus_freedesktop_dbus_set_open_locations (NautilusFreedesktopDBus  *fdb,
     }
 }
 
+/**
+ * nautilus_freedesktop_dbus_set_open_locations_xids:
+ * fdb: The skeleton for the dbus interface
+ * locations: Mapping of windows to locations open in each window
+ *
+ * This allows the application to publish the locations that are open in each window.
+ * It is used by unity launcher to match special dock
+ * icons For example, the Trash or a removable device.
+ */
+void
+nautilus_freedesktop_dbus_set_open_locations_xids (NautilusFreedesktopDBus *fdb,
+                                                   GVariant *locations)
+{
+    g_return_if_fail (NAUTILUS_IS_FREEDESKTOP_DBUS (fdb));
+
+    if (fdb->skeleton)
+    {
+       nautilus_freedesktop_file_manager1_set_xubuntu_open_locations_xids (fdb->skeleton, locations);
+    }
+}
+
 /**
  * nautilus_freedesktop_dbus_set_open_windows_with_locations:
  * fdb: The skeleton for the dbus interface
diff --git a/src/nautilus-freedesktop-dbus.h b/src/nautilus-freedesktop-dbus.h
index 416900e..ef79d25 100644
--- a/src/nautilus-freedesktop-dbus.h
+++ b/src/nautilus-freedesktop-dbus.h
@@ -34,4 +34,6 @@ NautilusFreedesktopDBus * nautilus_freedesktop_dbus_new (void);
 
 void nautilus_freedesktop_dbus_set_open_locations (NautilusFreedesktopDBus *fdb, const gchar **locations);
 
+void nautilus_freedesktop_dbus_set_open_locations_xids (NautilusFreedesktopDBus *fdb, GVariant *locations);
+
 void nautilus_freedesktop_dbus_set_open_windows_with_locations (NautilusFreedesktopDBus *fdb, GVariant *locations);
